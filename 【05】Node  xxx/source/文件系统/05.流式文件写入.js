// 同步/异步/简单文件的写入都不适合大文件的写入,性能较差,容易导致内存溢出;

/*--------------------------------------------
7、流式文件写入
（1）作用：适用于一些比较大的文件,可以分多次将文件写入到内存中;
（2）语法
	* 创建可写流：var 可写流名 = fs.createWriteStream(path,options{})
		- path，文件路径
		- options 配置的参数

	* 可以通过监听流的 open 与 close 事件来监听流的打开和关闭
		- 可写流名.once("open",回调函数)		为对象绑定一次性的事件;
		- 可写流名.once("close",回调函数)	为对象绑定一次性的事件;

	* 写入数据：可写流名.write("内容");

	* 关闭可写流
		- 可写流名.end();
		- 可写流名.close();

（3）事件
	* on(事件字符串,回调函数)	可以为对象绑定一个事件;
	* one(事件字符串,回调函数)	可以为对象绑定一个一次性的事件,该事件将会在触发一次以后自动失效;
	* once(事件字符串,回调函数)	可以为对象绑定一个一次性的事件,该事件将会在触发一次以后自动失效;
--------------------------------------------------------------------------+---------------*/
var fs = require("fs");
var ws = fs.createWriteStream("hello4.txt");

ws.once("open", function () {
  console.log("打开流");
});
ws.once("close", function () {
  console.log("关闭流");
});

//通过ws向文件中输出内容
ws.write("2023-06-19 17:22:00");
ws.write("通过可写流写入文件的内容;");
ws.write("今天天气真不错;");
ws.write("锄禾日当午;");
ws.write("红掌拨清波;");
ws.write("清清真漂亮;");

//关闭流
//ws.end();
ws.close();
